name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: write  # Docker 이미지 푸시 및 배포 시 필요

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: export PROD_SERVER_URL=${{ secrets.PROD_SERVER_URL }} ./gradlew build -Pspring.profiles.active=prod

      - name: Docker build & push to prod
        if: contains(github.ref, 'develop')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}

      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.5  # 최신 릴리스 버전을 명시하는 것
        id: deploy-prod
        if: contains(github.ref, 'develop')
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker stop ${{ secrets.DOCKER_REPOSITORY }} || true
            sudo docker rm ${{ secrets.DOCKER_REPOSITORY }} || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}
            sudo docker run -d -p 8080:8080 -e DB_HOST=${{ secrets.DB_HOST }} -e DB_NAME=${{ secrets.DB_NAME }} -e DB_PORT=${{ secrets.DB_PORT }} -e DB_USERNAME=${{ secrets.DB_USERNAME }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e AWS_ACCESSKEY=${{ secrets.AWS_ACCESSKEY }} -e AWS_SECRETKEY=${{ secrets.AWS_SECRETKEY }} -e AWS_REGION=${{ secrets.AWS_REGION }} -e S3_BUCKETNAME=${{ secrets.S3_BUCKETNAME }} -e PROD_SERVER_URL=${{ secrets.PROD_SERVER_URL }} --name ${{ secrets.DOCKER_REPOSITORY }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}
            sudo docker image prune -f