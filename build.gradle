plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id "org.sonarqube" version "4.0.0.2929"
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.epages.restdocs-api-spec' version '0.17.1'//restdocs -> swagger
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.letscareer'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
	snippetsDir = file('build/generated-snippets') // 스니펫이 생성되는 디렉터리 경로를 설정
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// openfeign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.github.openfeign:feign-okhttp'
	// 스프링부트 3.xx에서는 p6spy 버전 1.9.0 사용해야됨
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.jsoup:jsoup:1.17.2'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'

	//restdocs-api-spec 의존성 추가
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.squareup.okhttp3:mockwebserver'

	// Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

sourceSets {
	test {
		java {
			srcDirs = ['src/test/java']
		}
	}
}

def serverUrl = "http://localhost:8080"

if (project.hasProperty("spring.profiles.active")) {
	def activeProfile = project.property("spring.profiles.active")
	if (activeProfile == "prod") {
		serverUrl = System.getProperty('PROD_SERVER_URL') ?: "https://default.prod.server.url"
	} else if (activeProfile == "local") {
		serverUrl = "http://localhost:8080"
	}
}

// 필요한 파일 및 디렉터리 생성하는 태스크
tasks.register("prepareOpenApiFile") {
	doLast {
		def docsDir = file('build/resources/main/static/docs')
		if (!docsDir.exists()) {
			docsDir.mkdirs()
		}
		def apiFile = file('build/resources/main/static/docs/open-api-3.0.1.json')
		if (!apiFile.exists()) {
			apiFile.createNewFile()
		}
	}
}

// openapi3 태스크 실행 전에 파일을 생성하도록 설정
tasks.named('openapi3').configure {
	dependsOn 'prepareOpenApiFile'
}

// openapi3 설정
openapi3 {
	server = serverUrl
	title = "위대한레츠비 API 문서"
	description = "Spring REST Docs with SwaggerUI."
	version = "0.0.1"
	outputFileNamePrefix = 'open-api-3.0.1'
	format = 'json'
	outputDirectory = 'build/resources/main/static/docs'
}

// GenerateSwaggerUI 태스크가 openapi3 태스크에 의존하도록 설정
tasks.withType(GenerateSwaggerUI).configureEach {
	dependsOn 'openapi3'

	// 기존 파일 삭제 후 json 파일 복사
	delete file('src/main/resources/static/docs/')
	copy {
		from "build/resources/main/static/docs"
		into "src/main/resources/static/docs/"
	}
}

// 테스트를 통해 생성된 snippets 출력 위치 정의
tasks.register("ext") {
	snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir 'snippetsDir' // test 스니펫 디렉터리를 출력으로 추가하도록 작업을 구성
	finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
}

// 기존에 존재하던 docs 삭제
asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

// asciidoctor 작업을 구성
tasks.named("asciidoctor") {
	inputs.dir 'snippetsDir'
	configurations 'asciidoctorExt'
	dependsOn test
}


tasks.named("bootJar") {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
	dependsOn(':openapi3')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("$buildDir/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

tasks.named("build") {
	dependsOn copyDocument
}

// jacoco report 설정
jacocoTestReport {
	dependsOn compileJava
	dependsOn processResources
	// 제외할 패키지 또는 클래스 설정
	def excludedPackages = [
			'**/global/**',        // global 패키지 제외
			'**/dto/**',           // dto 패키지 제외
			'**/handler/**',       // handler 패키지 제외
			'**/model/**',         // model 패키지 제외
			'**/config/**',        // config 패키지 제외
			'**/common/**',        // common 패키지 제외
	]

	// 포함할 패키지 설정
	def includedPackages = [
			'com/boosting/**/application/**'  // application 패키지 포함
	]

	// 클래스 디렉토리 설정
	getClassDirectories().setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, include: includedPackages, exclude: excludedPackages)
			})
	)

	reports {
		xml.required = true
		xml.outputLocation = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")

		// html로 report 생성하기
		// 빌드경로/jacoco/report.html 폴더 내부로 경로 설정
		html.required = true
		html.outputLocation = file("$buildDir/reports/jacoco/test/html")
	}

	// jacocoTestReport가 끝나면 jacocoTestCoverageVerification 동작
	finalizedBy 'jacocoTestCoverageVerification'
}

// jacoco 커버리지 검증 설정
jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.0 // 최소 커버리지 비율 설정 (예: 80%)
			}
		}
	}
}